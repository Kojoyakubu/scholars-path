// server/routes/teacherRoutes.js

const express = require('express');
const router = express.Router();
const { param, body } = require('express-validator');
const {
  getMyLessonNotes,
  generateLessonNote,
  getLessonNoteById,
  deleteLessonNote,
  generateLearnerNote,
  createQuiz,
  uploadResource,
  getTeacherAnalytics,
} = require('../controllers/teacherController');
const { protect, authorize } = require('../middleware/authMiddleware');
const { handleValidationErrors } = require('../middleware/validatorMiddleware'); // <-- IMPORT
const upload = require('../middleware/uploadMiddleware');

// Protect all routes with Teacher authorization (admins can also access)
router.use(protect, authorize('teacher', 'school_admin', 'admin'));

// --- Reusable Validation Chains ---
const mongoIdParam = (name) => param(name, `Invalid ID format for '${name}'`).isMongoId();
const mongoIdBody = (name) => body(name, `A valid ID for '${name}' is required`).isMongoId();

const generateNoteValidator = [
  mongoIdBody('subStrandId'),
  body('school', 'School name is required').not().isEmpty().trim(),
  body('term', 'Term is required').not().isEmpty().trim(),
  body('duration', 'Duration is required').not().isEmpty().trim(),
  body('dayDate', 'Day/Date is required').not().isEmpty().trim(),
  // Removed performanceIndicator validation as it's generated by AI now
];

const createQuizValidator = [
  body('title', 'Quiz title is required').not().isEmpty().trim(),
  mongoIdBody('subjectId'),
];

// --- Route Definitions ---
// Use .route() for chaining methods to the same URL
router.route('/lesson-notes')
  .get(getMyLessonNotes);

router.route('/lesson-notes/:id')
  .get(mongoIdParam('id'), handleValidationErrors, getLessonNoteById)
  .delete(mongoIdParam('id'), handleValidationErrors, deleteLessonNote);

router.get('/analytics', getTeacherAnalytics);
router.post('/generate-note', generateNoteValidator, handleValidationErrors, generateLessonNote);
router.post('/generate-learner-note', mongoIdBody('lessonNoteId'), handleValidationErrors, generateLearnerNote);
router.post('/create-quiz', createQuizValidator, handleValidationErrors, createQuiz);

// For file uploads, validation of body fields happens after the file is processed by `upload` middleware
router.post('/upload-resource', upload, mongoIdBody('subStrandId'), handleValidationErrors, uploadResource);

module.exports = router;